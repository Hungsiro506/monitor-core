package parser;
import java.util.Queue;
import java.util.LinkedList;
import utils.Constants;
/*
 * Push-add first
 * Pull-get last and remove.
 * 
 * NEED TO REFACTOR.!!!
 */
public class Parser {
	private static LinkedList<LogMessage> queue;
	private int MaxSize = 1000;
	public Parser(){
		this.queue = new LinkedList<LogMessage>();
	}
	
	//should be private scope
	private void addFirst(LogMessage msg){
		this.queue.addFirst(msg);
	}
	//should be private
	private void removeLast(){
		this.queue.removeLast();
	}
	//should be private
	private void remove(int index){
		this.queue.remove(index);
	}
	/*
	 * Add new element to queue (at first), remove last if queue is full.
	 * By default size of queue  = 1000;
	 * IT IS CRISTICAL. IF MEASSE PRODUCE FASTER THAN IT COMSUMED, WHERE WILL GET NO MESG AT ALL.
	 */
	private void addNewMsg(LogMessage msg){
		if(this.queue.size() == this.MaxSize){
			this.queue.removeLast();
		}
		this.queue.addFirst(msg);
	}
	//Get last one, and remove it after we got it (if size() > 1)
	private LogMessage getMessage(){
		 LogMessage msg = null;
		 if(this.queue.size() > 0){
		 msg = this.queue.getLast();}
		 if(this.queue.size() > 1){
			 this.queue.removeLast();
		 }
		 return msg;
	}
	public LogMessage parse(String logLine){
		String logRegex = Constants.PAYTV_SERVICE_INFO_LOG_REGEX;
		String msgRegex = Constants.PAYTV_SERVICE_INFO_MESSAGE_LOG_REGEX;
		int grouptCount = Constants.PAYTV_SERVICE_INFO_LOG_REGEX_GROUPS_COUNT;
		
		LogParser logParser = new LogParser(logRegex,grouptCount);
		MessageParser messageParser = new MessageParser(msgRegex);
		
		LogMessage metrics = messageParser.getMessageObject(logParser.getLogMeassage(logLine));
		
		return metrics;
		//this.queue.add(metrics);
	}
	public LogMessage pull(){
		return this.getMessage();
	}
	public void parserAndPush(String logLine){
		this.queue.add(this.parse(logLine));
	}
	
	
	
}
