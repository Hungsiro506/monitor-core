package sender;
import parser.LogMessage;
import parser.Parser;

import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import io.github.hengyunabc.zabbix.sender.DataObject;
import io.github.hengyunabc.zabbix.sender.SenderResult;
import io.github.hengyunabc.zabbix.sender.ZabbixSender;
import utils.Constants;


public class Zabbix_Sender implements Runnable{
	private String zabbixServerIP;
	private int port;
	private Parser parser;
	private ZabbixSender sender;
	private String agentIP;
	private boolean shouldIRun = true;
	private int waittingNewMessage = 2000;
	@Override
	public void run() {
		try{
		// TODO Auto-generated method stub
		while(shouldIRun){
			
			int totalError = 0;
			int totalRead = 0;
			int totalWrite = 0;
			LogMessage metrics = parser.pull();
			if(metrics !=  null) {
				 totalError = metrics.getTotalError();
				 totalRead = metrics.getTotalRead();
				 totalWrite = metrics.getTotalWrite();
		        try {
					SenderResult totalErrorResult = this.send(agentIP, "TotalError",Integer.toString(totalError));
					SenderResult totalWriteResult = this.send(agentIP, "TotalWrite",Integer.toString(totalWrite));
					SenderResult totalReadResult = this.send(agentIP, "TotalRead",Integer.toString(totalRead));
					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			//should delete message after recieved ack 
	        if(parser.count() == 0){
	        	Thread.sleep(this.waittingNewMessage);
	        }
			
		}
		}catch(Exception e){
			shouldIRun =false;
		}
	}
	/**
	 * 
	 * @param host :Zabbix server Ip
	 * @param port :Zabbix server port - by default 10051
	 * @param parser : parser object, which contains metrics queue. 
	 * @param agentIP : IP of agent. 
	 */
	public Zabbix_Sender(String host, int port, Parser parser,String agentIP){
		this.zabbixServerIP = host;
		this.port = port; 
		this.parser = parser;
		this.sender = new ZabbixSender(host,port);
		this.agentIP = agentIP;
	}
	/*
	 * Sending message to Zabbix server - specifict agent ip
	 * @pararm agentIP : IP of agent - to identify an agent.
	 * @parram key : key of item, must same as Key you set in server.
	 * @parram value : payload of metrics. 
	 * @throw IOException.
	 * 
	 * @return SenderResults
	 */
	private SenderResult send(String agentIP,String key,String value) throws IOException{
		DataObject totalError_DataObject = new DataObject();
		totalError_DataObject.setHost(agentIP);
		totalError_DataObject.setKey(key);
		totalError_DataObject.setValue(value);
		totalError_DataObject.setClock(System.currentTimeMillis()/1000);
		SenderResult result = sender.send(totalError_DataObject);
        return result;
	}
	/**
	 * 
	 * @param key
	 * @param value
	 * @return
	 * @throws IOException
	 */
	public SenderResult send(String key,String value) throws IOException{
		DataObject totalError_DataObject = new DataObject();
		totalError_DataObject.setHost(this.agentIP);
		totalError_DataObject.setKey(key);
		totalError_DataObject.setValue(value);
		totalError_DataObject.setClock(System.currentTimeMillis()/1000);
		SenderResult result = sender.send(totalError_DataObject);
        return result;
	}

}
