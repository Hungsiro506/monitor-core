package parser;
import java.util.Queue;
import java.util.LinkedList;
/*
 * Push-add first
 * Pull-get last and remove.
 */
public class Parser {
	private LinkedList<LogMessage> queue;
	private int MaxSize = 1000;
	public Parser(){
		this.queue = new LinkedList<LogMessage>();
	}
	
	//should be private scope
	public void addFirst(LogMessage msg){
		this.queue.addFirst(msg);
	}
	//should be private
	public void removeLast(){
		this.queue.removeLast();
	}
	//should be private
	public void remove(int index){
		this.queue.remove(index);
	}
	/*
	 * Add new element to queue (at first), remove last if queue is full.
	 * By default size of queue  = 100;
	 */
	public void addNewMsg(LogMessage msg){
		if(this.queue.size() == this.MaxSize){
			this.queue.removeLast();
		}
		this.queue.addFirst(msg);
	}
	//Get last one, and remove it after we got it (if size() > 1)
	public LogMessage getMessage(){
		 LogMessage msg = this.queue.getLast();
		 if(this.queue.size() > 1){
			 this.queue.removeLast();
		 }
		 return msg;
	}
	
	
}
